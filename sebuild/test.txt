public class Ë{public List<IMyGyro>Ì;public Vector3 Í=Vector3.UnitX;public Vector3 OrientLocal{get{return Vector3.TransformNormal(Í,Matrix.Transpose(Î.WorldMatrix));}set{Í=Vector3.TransformNormal(value,Î.WorldMatrix);}}IMyTerminalBlock Î;Vector3 Ï;float Ð=0F;public float Ñ=0.2F;public bool IsOriented{get{return Math.Abs(Ð)<0.0001;}}public Ë(List<IMyGyro>Ò,IMyTerminalBlock Ó){Ì=Ò;Î=Ó;Matrix Ô;Î.Orientation.GetMatrix(out Ô);Ï=Ô.Forward;}public float Õ(){Matrix Ö;Ü();foreach(var Ø in Ì){Ø.Orientation.GetMatrix(out Ö);var Ù=Vector3.TransformNormal(Ï,Matrix.Transpose(Ö));var Ú=Vector3.TransformNormal(Í,MatrixD.Transpose(Ø.WorldMatrix));var Û=Vector3.Cross(Ù,Ú);Û.Normalize();Û=Û*Ð*Ñ;Ø.Pitch=Û.X;Ø.Yaw=Û.Y;Ø.Roll=Û.Z;}return Ð;}private void Ü()=>Ð=Ý(Î.WorldMatrix.GetOrientation().Forward,Í);private float Ý(Vector3 a,Vector3 b){a.Normalize();b.Normalize();var Þ=(float)Math.Acos(a.Dot(b));if(Þ==0){return 0.00001F;}if(float.IsNaN(Þ)){return-0.00001F;}else{return Þ;}}}public abstract class A{protected IEnumerator<object>B;public IEnumerator<object>Progress{get{return B;}set{if(B!=null){B.Dispose();}B=value;}}public bool InProgress{get{return Progress!=null;}}private class C:A{public A D,E;protected override IEnumerator<object>F(){D.Q();foreach(var G in D){yield return null;}E.Q();foreach(var H in E){yield return null;}}}private class I:A{public A J,K;protected override IEnumerator<object>F(){J.Q();K.Q();while(J.InProgress){J.R();K.R();yield return null;}}}public A L(A M)=>new C(){D=this,E=M};public A N(A O)=>new I(){J=this,K=O};public IEnumerator<object>P(){return Progress;}public void Q(){Progress=F();}protected abstract IEnumerator<object>F();public virtual bool R(){if(Progress==null){return true;}bool S=Progress.MoveNext();if(S){return false;}else{Progress.Dispose();Progress=null;return true;}}}class T:A{Func<IEnumerator<object>>U;public T(Func<IEnumerator<object>>V){U=V;}protected override IEnumerator<object>F(){return U();}}public class W:A{public readonly GyroController X;public bool Y=true;public W(IMyGridTerminalSystem Z){List<IMyGyro>a=new List<IMyGyro>();Z.GetBlocksOfType(a);var b=Z.GetBlockWithName("COCKPIT");X=new GyroController(a,b);}protected override IEnumerator<object>F(){try{while((Y&&!X.IsOriented)^!Y){X.Step();yield return null;}}finally{foreach(var c in X.Gyros){c.GyroOverride=false;}}}}sealed class d{float P{get;set;}float I{get;set;}float D{get;set;}float e=0;float f;float g=float.NaN;float h=0F;public d(float i,float j,float k,float l=0F,float m=0.16F){P=i;I=j;D=k;f=m;h=l;}public d(d n){P=n.P;I=n.I;D=n.D;e=n.e;f=n.f;g=n.g;h=n.h;}public float o(float p){e+=p;e*=(1F-h);float i=e*(1F-h)*f;float d=(p-g)/f;if(float.IsNaN(g)){d=0;}float q=(P*p)+(I*i)+(D*d);g=p;return q;}}IMyShipController r;W s;y t;A u;public Program(){r=GridTerminalSystem.GetBlockWithName("COCKPIT")as IMyShipController;s=new W(GridTerminalSystem);t=new y(GridTerminalSystem){parent=this};u=s.L(t);s.X.OrientWorld=-r.GetShipVelocities().LinearVelocity;}public void Save(){}public void Main(string v,UpdateType w){if(w.HasFlag(UpdateType.Once)){bool x=s.R()&&t.R()&&u.R();if(!x){Runtime.UpdateFrequency|=UpdateFrequency.Once;}return;}else if((w&(UpdateType.Terminal|UpdateType.Script|UpdateType.Trigger|UpdateType.Mod))!=0){if(v=="align"){s.X.OrientWorld=-r.GetShipVelocities().LinearVelocity;s.Q();}else if(v=="retro"){s.X.OrientWorld=-r.GetShipVelocities().LinearVelocity;u.Q();}Runtime.UpdateFrequency|=UpdateFrequency.Once;}}public class y:A{public Program parent{get;set;}List<IMyThrust>z=new List<IMyThrust>();IMyShipController À;d Á=new d(0.07F,0F,0F);float Â;public y(IMyGridTerminalSystem Ã){À=Ã.GetBlockWithName("COCKPIT")as IMyShipController;Â=À.CalculateShipMass().TotalMass;Ã.GetBlocksOfType(z,(Ä)=>Ä.WorldMatrix.GetOrientation().Forward==À.WorldMatrix.GetOrientation().Backward);}protected override IEnumerator<object>F(){try{var Å=0.2F;Matrix Æ;À.Orientation.GetMatrix(out Æ);while(Å>0.02F){var Ç=Vector3D.TransformNormal(À.GetShipVelocities().LinearVelocity,MatrixD.Transpose(À.WorldMatrix));Å=(float)Ç.Z;var È=-Á.o(-Å);foreach(var É in z){É.ThrustOverridePercentage=È;}yield return null;}}finally{foreach(var Ê in z){Ê.ThrustOverride=0F;}}yield return null;}}