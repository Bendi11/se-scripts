        Sendy<int> i;
        public Program() {
            var cockpit = GridTerminalSystem.GetBlockWithName("COCKPIT") as IMyShipController;
            Runtime.UpdateFrequency |= UpdateFrequency.Update10;
        }

        public void Save() {
            
        }

        public void Main(string argument, UpdateType updateSource) {
            i.SendRequest(2, 3);
            Log.Put("TEST");
            if(!updateSource.HasFlag(UpdateType.Update10)) {
            }
        }
    /// <summary>
    /// General purpose unicast communications protocol with boilerplate
    /// reducing methods to register actions for specific requests
    /// </summary>
    public abstract class Sendy<Method> {
        public readonly IMyIntergridCommunicationSystem IGC;
        public IMyBroadcastListener Broadcast = null;

        long _msgNo = 1;
        Dictionary<long, Nullable<Response>> _waiting;

        public const string
            REQUEST = "req",
            RESPONSE = "resp";

        public struct Response {
            public long Address;
            public object Data;
        }

        public Sendy(IMyIntergridCommunicationSystem _IGC) {
            IGC = _IGC;
        }

        public long SendRequest(long addr, Method method, object data = null) {
            long msgNo = _msgNo++;
            IGC.SendUnicastMessage(addr, REQUEST, MyTuple.Create(method, msgNo, data));
            return msgNo;
        }
    }
    /// <summary>
    /// Simple logging facility supporting many screen sizes and automatic text wrapping
    /// </summary>
    public static class Log {
        static IMyTextSurface _term;
        static int _lines = 0;
        static Vector2 BOUNDS;

        public static void Put(string msg) {
            if(_lines >= BOUNDS.Y) {
                _term.WriteText("", false);
                _lines = 0;
            }
            
            while(msg.Length > 0) {
                int len = Math.Min((int)BOUNDS.X, msg.Length);
                _term.WriteText(msg.Substring(0, len), true);
                msg = msg.Substring(len);
                _term.WriteText("\n", true);
                _lines += 1;
            }
        }
    }
