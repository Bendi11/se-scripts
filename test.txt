public abstract class Sendy<Method>{public readonly IMyIntergridCommunicationSystem IGC;public IMyBroadcastListener Broadcast=null;long _msgNo=1;Dictionary<long,Nullable<Response>>_waiting;public const string REQUEST="req",RESPONSE="resp";public struct Response{public long Address;public object Data;}public struct Request{public F Method;public long Address;public long MsgNo;public object Data;}public Sendy(IMyIntergridCommunicationSystem _IGC){G=S;}public abstract void HandleRequest(Request request);private void Receive(){while(G.UnicastListener.HasPendingMessage){W(G.UnicastListener.AcceptMessage());}while(H!=null&&H.HasPendingMessage){W(H.AcceptMessage());}}private void HandleMessage(MyIGCMessage msg){switch(X.Tag){case K:{if(!(X.Data is MyTuple<F,long,object>)){x.É($"Invalid request payload: {X.Data.GetType()}");return;}var data=(MyTuple<F,long,object>)X.Data;Request req=new Request(){O=Y.Item1,P=X.Source,Q=Y.Item2,R=Y.Item3,};T(Z);}break;case L:{if(!(X.Data is MyTuple<long,object>)){x.É($"Invalid response payload: {X.Data.GetType()}");return;}var data=(MyTuple<long,object>)X.Data;Nullable<Response>resp;if(J.TryGetValue(a.Item1,out b)){b=new Response(){M=X.Source,N=a.Item2};}}break;}}public IEnumerable<Nullable<Response>>WaitResponse(long msgNo,double timeOut=-1){var startTime=Process.Time;while(e!=-1&&Process.Time-f<e){if(J[d].HasValue){yield return J[d];yield break;}yield return null;}J.Remove(d);}public IEnumerable<Nullable<Response>>WaitResponses(long msgNo,double timeOut=-1){var startTime=Process.Time;while(i!=-1&&(Process.Time-j)<i){yield return J[h].Value;J[h]=null;}J.Remove(h);}public long SendRequest(long addr,F method,object data=null){long msgNo=I++;G.SendUnicastMessage(l,K,MyTuple.Create(m,o,n));return o;}public long BroadcastRequest(string tag,F method,object data=null){long msgNo=I++;G.SendBroadcastMessage(q,MyTuple.Create(r,t,s));return t;}public void Respond(Request req,object data=null){G.SendUnicastMessage(v.P,L,MyTuple.Create(v.Q,w));}}E<int>i;public Program(){var cockpit=GridTerminalSystem.GetBlockWithName("COCKPIT")as IMyShipController;Runtime.UpdateFrequency|=UpdateFrequency.Update10;}public void Save(){}public void Main(string argument,UpdateType updateSource){A.k(2,3);x.Ë("TEST");if(!D.HasFlag(UpdateType.Update10)){}}public static class Log{static IMyTextSurface _term;static int _lines=0;static Vector2 BOUNDS;public static void Init(IMyTextSurface term){y=Â;y.WriteText("",false);y.BackgroundColor=Color.Black;y.ContentType=ContentType.TEXT_AND_IMAGE;y.Font="Monospace";y.FontColor=Color.Lime;y.FontSize=0.7F;y.TextPadding=0F;var sb=new StringBuilder();Ã.Append('A');var sz=y.MeasureStringInPixels(Ã,"Monospace",y.FontSize);À=(y.SurfaceSize-Ä)/Ä;}public static void Panic(string msg){Ë("[FTL]"+Æ);throw new Exception(Æ);}public static void Error(string msg)=>Ë("[ERR]"+È);public static void Warn(string msg)=>Ë("[WRN]"+Ê);public static void Put(string msg){if(z>=À.Y){y.WriteText("",false);z=0;}while(Ì.Length>0){int len=Math.Min((int)À.X,Ì.Length);y.WriteText(Ì.Substring(0,Í),true);Ì=Ì.Substring(Í);y.WriteText("\n",true);z+=1;}}}public class LcdWriter{public IMyTextSurface LCD;public bool Wrap=true;readonly Vector2 _bounds,_defaultCharSize;readonly StringBuilder _sb=new StringBuilder();const string FONT="Monospace";int _lines=0;public float FitLines{set{Ï.FontSize=FitLines/value;}get{return Ñ.Y/Ò.Y;}}public float FitCols{set{Ï.FontSize=FitCols/value;}get{return Ñ.X/Ò.X;}}public void Fit(float lines,float cols){var fLines=FitLines/×;var fCols=FitCols/Ø;Ï.FontSize=Math.Min(Ù,Ú);}public LcdWriter(IMyTextSurface lcd){Ó.Append('A');Ï=Û;Ï.Font=Ô;Ï.FontSize=1;Ï.TextPadding=0F;Ò=Ï.MeasureStringInPixels(Ó,Ô,1);}public void Write(string msg){if(Õ>=Ñ.Y){Ï.WriteText("",false);Õ=0;}do{int len=Math.Min((int)Ñ.X,Ý.Length);Ï.WriteText(Ý.Substring(0,Þ),true);Ý=Ý.Substring(Þ);Ï.WriteText("\n",true);Õ+=1;}while(Ð&&(Ý.Length>=0));}}